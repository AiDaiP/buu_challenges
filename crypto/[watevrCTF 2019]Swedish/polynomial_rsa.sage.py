
# This file was *autogenerated* from the file polynomial_rsa.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_16 = Integer(16); _sage_const_65537 = Integer(65537)
flag = bytearray(raw_input())
flag = list(flag)
length = len(flag)
bits = _sage_const_16 

## Prime for Finite Field.
p = random_prime(_sage_const_2 **bits-_sage_const_1 , False, _sage_const_2 **(bits-_sage_const_1 ))

file_out = open("downloads/polynomial_rsa.txt", "w")
file_out.write("Prime: " + str(p) + "\n")

## Univariate Polynomial Ring in y over Finite Field of size p
R = PolynomialRing(GF(p), names=('y',)); (y,) = R._first_ngens(1)

## Analogous to the primes in Z
def gen_irreducable_poly(deg):
    while True:
        out = R.random_element(degree=deg)
        if out.is_irreducible():
            return out


## Polynomial "primes"
P = gen_irreducable_poly(ZZ.random_element(length, _sage_const_2 *length))
Q = gen_irreducable_poly(ZZ.random_element(length, _sage_const_2 *length))

## Public exponent key
e = _sage_const_65537 

## Modulus
N = P*Q
file_out.write("Modulus: " + str(N) + "\n")

## Univariate Quotient Polynomial Ring in x over Finite Field of size 659 with modulus N(x)
S = R.quotient(N, names=('x',)); (x,) = S._first_ngens(1)

## Encrypt
m = S(flag)
c = m**e

file_out.write("Ciphertext: " + str(c))
file_out.close()

